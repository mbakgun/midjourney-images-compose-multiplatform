<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>FunctionNaming:GridStateExt.kt$@Composable fun LazyGridState.OnBottomReached( loadMore: () -&gt; Unit )</ID>
    <ID>FunctionNaming:GridStateExt.kt$@Composable fun LazyStaggeredGridState.OnBottomReached( loadMore: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun DraggableThemeSelection( useDarkTheme: Boolean, onClick: (Boolean) -&gt; Unit )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun EmptyScreen( onRefresh: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun ErrorScreen( onRefresh: () -&gt; Unit )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun MjImagesList( images: MjImages, state: LazyStaggeredGridState, onLoadMore: () -&gt; Unit, showPreviewDialog: (imageUrl: String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun PlatformSpecificMjImagesGrid( state: LazyStaggeredGridState, images: MjImages, showPreviewDialog: (imageUrl: String) -&gt; Unit, onLoadMore: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun PreviewDialog( imageUrl: String, onDismissed: () -&gt; Unit, )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun PreviewImage(imageUrl: String)</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@Composable fun ScrollToTopButton( onClick: () -&gt; Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@OptIn(ExperimentalFoundationApi::class) @Composable fun MjImageItem( image: MjImage, showPreviewDialog: (imageUrl: String) -&gt; Unit, )</ID>
    <ID>FunctionNaming:MjImagesApp.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun MjImagesApp( viewModel: MjImagesViewModel )</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun AppTheme( useDarkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -&gt; Unit )</ID>
    <ID>FunctionNaming:main.ios.kt$fun MainViewController(viewModel: MjImagesViewModel): UIViewController</ID>
    <ID>LongMethod:MjImagesApp.kt$@OptIn(ExperimentalMaterialApi::class) @Composable fun MjImagesApp( viewModel: MjImagesViewModel )</ID>
    <ID>MagicNumber:Colors.kt$0xFF1F1B16</ID>
    <ID>MagicNumber:Colors.kt$0xFF3E2D16</ID>
    <ID>MagicNumber:Colors.kt$0xFF452B00</ID>
    <ID>MagicNumber:Colors.kt$0xFF690005</ID>
    <ID>MagicNumber:Colors.kt$0xFF6F5B40</ID>
    <ID>MagicNumber:Colors.kt$0xFF825500</ID>
    <ID>MagicNumber:Colors.kt$0xFFBA1A1A</ID>
    <ID>MagicNumber:Colors.kt$0xFFDDC2A1</ID>
    <ID>MagicNumber:Colors.kt$0xFFEAE1D9</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFB4AB</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFB951</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFFBFF</ID>
    <ID>MagicNumber:Colors.kt$0xFFFFFFFF</ID>
    <ID>MagicNumber:ImageLoader.kt$0.25</ID>
    <ID>MagicNumber:ImageLoader.kt$1024</ID>
    <ID>MagicNumber:ImageLoader.kt$32</ID>
    <ID>MagicNumber:ImageLoader.kt$512L</ID>
    <ID>MagicNumber:MjImagesApp.kt$.2f</ID>
    <ID>MagicNumber:MjImagesApp.kt$.8f</ID>
    <ID>MagicNumber:MjImagesApp.kt$180</ID>
    <ID>MagicNumber:MjImagesApp.kt$230f</ID>
    <ID>MagicNumber:MjImagesApp.kt$24f</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidInstrumentedTest by getting { dependencies { implementation(libs.androidxUiTestJunit4) implementation(libs.androidxUiTestManifest) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidMain by getting { dependencies { api(libs.koin) implementation(libs.ktorClient) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidMain by getting { dependencies { implementation(project(":shared")) api(libs.androidxActivityCompose) api(libs.androidxAppcompat) api(libs.androidxCoreKtx) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val commonTest by getting { dependencies { implementation(kotlin("test-common")) implementation(kotlin("test-annotations-common")) implementation(libs.kotlinxCoroutinesTest) implementation(libs.koinTest) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val iosMain by creating { dependsOn(commonMain) iosX64Main.dependsOn(this) iosArm64Main.dependsOn(this) iosSimulatorArm64Main.dependsOn(this) dependencies { implementation(libs.ktorClientIos) } }</ID>
  </CurrentIssues>
</SmellBaseline>
